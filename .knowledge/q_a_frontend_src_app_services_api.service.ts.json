{"is_source_file": true, "format": "TypeScript", "description": "This file defines the ApiService class providing methods to interact with a backend REST API, including session management, message handling, and error processing, in an Angular application.", "external_files": ["../../environments/environment", "../models"], "external_methods": ["HttpClient.get", "HttpClient.post", "HttpClient.delete", "HttpParams.set", "inject"], "published": ["ApiService"], "classes": [{"name": "ApiService", "description": "Provides typed methods for interacting with backend API, including session creation, retrieval, deletion, message handling, and error management."}], "methods": [{"name": "health", "description": "Checks the health of the backend API."}, {"name": "createSession", "description": "Creates a new session with the backend API."}, {"name": "listSessions", "description": "Retrieves a list of sessions, with optional pagination."}, {"name": "getSession", "description": "Fetches details of a specific session by ID."}, {"name": "deleteSession", "description": "Deletes a session by ID."}, {"name": "listMessages", "description": "Retrieves messages for a specific session."}, {"name": "sendMessage", "description": "Sends a message payload to the backend API."}, {"name": "handleError", "description": "Handles HTTP errors, normalizing network and server errors into user-friendly messages."}], "calls": ["this.http.get", "this.http.post", "this.http.delete", "timeout", "catchError", "encodeURIComponent"], "search-terms": ["ApiService", "Angular", "REST API", "session management", "message handling", "HttpClient", "error handling", "RxJS", "TypeScript"], "state": 2, "file_id": 23, "knowledge_revision": 95, "git_revision": "1b75e15102b5dc1da46e54c956322ad954150632", "revision_history": [{"47": ""}, {"88": ""}, {"95": "1b75e15102b5dc1da46e54c956322ad954150632"}], "ctags": [{"_type": "tag", "name": "ApiService", "path": "/home/kavia/workspace/code-generation/conversational-qa-chatbot-2995-3004/q_a_frontend/src/app/services/api.service.ts", "pattern": "/^export class ApiService {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "http", "path": "/home/kavia/workspace/code-generation/conversational-qa-chatbot-2995-3004/q_a_frontend/src/app/services/api.service.ts", "pattern": "/^  private http = inject(HttpClient);$/", "language": "TypeScript", "kind": "property", "scope": "ApiService", "scopeKind": "class"}, {"_type": "tag", "name": "message", "path": "/home/kavia/workspace/code-generation/conversational-qa-chatbot-2995-3004/q_a_frontend/src/app/services/api.service.ts", "pattern": "/^    let message = 'An unexpected error occurred.';$/", "language": "TypeScript", "kind": "variable"}, {"_type": "tag", "name": "p", "path": "/home/kavia/workspace/code-generation/conversational-qa-chatbot-2995-3004/q_a_frontend/src/app/services/api.service.ts", "pattern": "/^    const p = path.startsWith('\\/') ? path : `\\/${path}`;$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/conversational-qa-chatbot-2995-3004/q_a_frontend/src/app/services/api.service.ts", "pattern": "/^    const params = new HttpParams().set('session_id', sessionId);$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "params", "path": "/home/kavia/workspace/code-generation/conversational-qa-chatbot-2995-3004/q_a_frontend/src/app/services/api.service.ts", "pattern": "/^    const params = new HttpParams().set('skip', skip).set('limit', limit);$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "rawMessage", "path": "/home/kavia/workspace/code-generation/conversational-qa-chatbot-2995-3004/q_a_frontend/src/app/services/api.service.ts", "pattern": "/^    const rawMessage = (err?.message || '').toLowerCase();$/", "language": "TypeScript", "kind": "constant"}], "hash": "7ebd59b8d79e337b1c7cbd7273880259", "format-version": 4, "code-base-name": "q_a_frontend", "filename": "q_a_frontend/src/app/services/api.service.ts", "fields": [{"name": "private http = inject(HttpClient);", "scope": "ApiService", "scopeKind": "class", "description": "unavailable"}, {"name": "let message = 'An unexpected error occurred.';", "scope": "", "scopeKind": "", "description": "unavailable"}]}